"""
Django settings for grow_journal project.

Generated by 'django-admin startproject' using Django 1.9.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
import dj_database_url
from django.contrib import messages

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'wkvd(%bu1(d3bvj7eg^%$h7-%qv()humsrh9*nzh_zj^5zvv(l'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(os.environ.get('DJANGO_DEBUG', ''))

ALLOWED_HOSTS = ['*',]
LOCAL_HOST = os.environ.get('LOCAL_HOST')
if LOCAL_HOST:
    ALLOWED_HOSTS.append(LOCAL_HOST)


# Application definition

INSTALLED_APPS = [
    'core',
    'django_admin_bootstrapped',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.humanize',
    'rest_framework',
    'grow_journal',
    'bootstrap3',
    'datetimewidget',
    'geography',
    'taxonomy',
    'observations',
    'tasks',
    'weather',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #'core.middleware.LoginRequiredMiddleware',
    'core.middleware.LocalTimezoneMiddleware',
]

ROOT_URLCONF = 'grow_journal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [ os.path.join(BASE_DIR, 'templates'),],
        'APP_DIRS': True,
        'OPTIONS': {
            'debug': DEBUG,
            'context_processors': [
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.request',
                'django.template.context_processors.static',
                'django.template.context_processors.tz',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.user_sites',
                'taxonomy.context_processors.use_latin_names'
            ],
        },
    },
]

WSGI_APPLICATION = 'grow_journal.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

default = 'sqlite:///' + os.path.join(BASE_DIR, 'db.sqlite3')
DATABASES = {}

DATABASES['default'] = dj_database_url.config(default=default)
dbUsername = os.environ.get('DATABASE_USERNAME', '')
dbPassword = os.environ.get('DATABASE_PASSWORD', '')
dbHost = os.environ.get('DATABASE_HOST', '')

if dbHost:
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.mysql',
        'USER': dbUsername,
        'PASSWORD': dbPassword,
        'PORT': '3306',
        'HOST': dbHost,
        'NAME': 'farmlog',
    }

# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


###########
# LOGGING #
###########


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': ('%(asctime)s [%(process)d] [%(levelname)s] ' +
                       'pathname=%(pathname)s lineno=%(lineno)s ' +
                       'funcname=%(funcName)s %(message)s'),
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        }
    },
    'handlers': {
        'null': {
            'level': 'DEBUG',
            'class': 'logging.NullHandler',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        }
    },
    'loggers': {
        'testlogger': {
            'handlers': ['console'],
            'level': 'INFO',
        }
    }
}

# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True
DEFAULT_TIME_ZONE = 'US/Central'

MEDIA_ROOT = '/media/'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_STORAGE = 'whitenoise.django.GzipManifestStaticFilesStorage'
SITE_ID = 1
MEDIA_URL = '/media/'
MEDIA_ROOT = '/media/'



LOGIN_URL = '/api-auth/login/'
LOGIN_REDIRECT_URL = '/'


###########
#  Django Admin Bootstrap Settings

MESSAGE_TAGS = {
            messages.SUCCESS: 'alert-success success',
            messages.WARNING: 'alert-warning warning',
            messages.ERROR: 'alert-danger error'
}

DAB_FIELD_RENDERER = 'django_admin_bootstrapped.renderers.BootstrapFieldRenderer'

###########


######################
# Weather Settings
WEATHER_USERNAME = os.environ.get('WEATHER_USERNAME')
WEATHER_URL = os.environ.get('URL')
WEATHER_KEY = os.environ.get('WEATHER_KEY')

WEATHER_DATA = {WEATHER_USERNAME: {
    'wunder_key': WEATHER_KEY or 'cc622998c566839f',
    'url': WEATHER_URL or 'http://api.wunderground.com/api/cc622998c566839f/conditions/q/pws:KLACOVIN33.json'
}}
